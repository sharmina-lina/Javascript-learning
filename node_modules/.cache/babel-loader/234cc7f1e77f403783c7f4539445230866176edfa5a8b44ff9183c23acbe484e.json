{"ast":null,"code":"// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker.register(swUrl).then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      }).catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["register","process","env","NODE_ENV","navigator","window","addEventListener","swUrl","PUBLIC_URL","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","unregister","ready"],"sources":["D:/Codeacademy_project/ravenous/src/registerServiceWorker.js"],"sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,eAAe,SAASA,QAAQ,GAAG;EACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,eAAe,IAAIC,SAAS,EAAE;IACzEC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACpC,MAAMC,KAAK,GAAI,GAAEN,OAAO,CAACC,GAAG,CAACM,UAAW,oBAAmB;MAC3DJ,SAAS,CAACK,aAAa,CACpBT,QAAQ,CAACO,KAAK,CAAC,CACfG,IAAI,CAACC,YAAY,IAAI;QACpBA,YAAY,CAACC,aAAa,GAAG,MAAM;UACjC,MAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAU;UAChDD,gBAAgB,CAACE,aAAa,GAAG,MAAM;YACrC,IAAIF,gBAAgB,CAACG,KAAK,KAAK,WAAW,EAAE;cAC1C,IAAIZ,SAAS,CAACK,aAAa,CAACQ,UAAU,EAAE;gBACtC;gBACA;gBACA;gBACA;gBACAC,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;cAC1D,CAAC,MAAM;gBACL;gBACA;gBACA;gBACAD,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;cACnD;YACF;UACF,CAAC;QACH,CAAC;MACH,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACdH,OAAO,CAACG,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,SAASC,UAAU,GAAG;EAC3B,IAAI,eAAe,IAAIlB,SAAS,EAAE;IAChCA,SAAS,CAACK,aAAa,CAACc,KAAK,CAACb,IAAI,CAACC,YAAY,IAAI;MACjDA,YAAY,CAACW,UAAU,EAAE;IAC3B,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}